- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
-
  const shouldBeSelected = (idToSelect) => {
    const predicateDispatcher = {
      number: (selectable) => idToSelect.toString() === selectable.toString(),
      string: (selectable) => idToSelect === selectable.toString(),
      object: (selectable) => idToSelect && idToSelect
        .map((item) => item.id?.toString() ?? item.toString())
        .includes(selectable.toString()),
      undefined: () => false,
    };
    return predicateDispatcher[typeof (idToSelect)];
  }

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - entityName = entity.constructor.name.toLowerCase()
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`entities.${entityName}.${propertyName}`)
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  .form-group
    input(class='btn btn-primary' type='submit')&attributes(attributes)
    if (block)
      block

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin select(entities, labelText, propertyName, idToSelect, config = {}, errors = {})
  - shouldOptionBeSelected = shouldBeSelected(idToSelect)
  - propertyErrors = _.get(errors, _.snakeCase(propertyName))
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-group
    label(
      for= inputId
    )= labelText
    select(
      id=inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)
      if (config.firstOptionEmpty)
        option
      each entity in entities
        option(
          value=`${entity.id}`
          selected=shouldOptionBeSelected(entity.id)
        )= entity.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin checkbox(isSelected, labelText, propertyName)
  .form-group.form-check
    input(
      id= propertyName
      name=propertyName
      class='form-check-input'
      type='checkbox'
      checked=isSelected
    )
    label(
      class='form-check-label'
      for= propertyName
    )= labelText

mixin textarea(initialValue, labelText, propertyName, rowsCount)
  - inputId = getInputId(propertyName)
  .form-group
    label(
      for= inputId
    )= labelText
    textarea(
      rows= rowsCount
      id= inputId
      name= getInputName(propertyName)
      class="form-control"
    )= initialValue
